{"version":3,"sources":["students/StundentItem.js","students/StudentList.js","students/StudentSearch.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["StudentItem","id","name","email","className","alt","src","StudentList","Students","map","student","i","key","StudentSearch","studentsSearchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","borderTop","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onStudentSearchChange","event","target","value","fetch","then","response","json","users","filteredStudents","filter","students","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kSAceA,G,MAZK,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAC5B,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BL,EAA1B,cACtB,6BACI,4BAAKC,GACL,2BAAIC,OCcLI,G,MAlBK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAClB,OACI,6BAEQA,EAASC,KAAI,SAACC,EAASC,GACnB,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLV,GAAIO,EAASG,GAAGV,GAChBC,KAAMM,EAASG,GAAGT,KAClBC,MAAOK,EAASG,GAAGR,cCDhCU,EAXO,SAAC,GAAwC,EAAvCC,oBAAwC,IAAnBC,EAAkB,EAAlBA,aACzC,OACI,2BACIX,UAAU,gCACVY,KAAK,SACLC,YAAY,iBACZC,SAAUH,KCEPI,EARA,SAACC,GACZ,OACI,yBAAMhB,UAAU,UAAUiB,MAAO,CAACC,UAAW,SAAUC,UAAW,kBAAmBC,OAAQ,UACxFJ,EAAMK,WCiBJC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,gBACKO,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,2DAEJG,KAAKX,MAAMK,a,GAhBCQ,aCmDZC,E,kDA5CX,aAAe,IAAD,8BACV,gBAcJC,sBAAwB,SAACC,GACrB,EAAKJ,SAAS,CAAClB,oBAAqBsB,EAAMC,OAAOC,SAdjD,EAAKX,MAAQ,CACTnB,SAAU,GACVM,oBAAqB,IAJf,E,gEAQO,IAAD,OAChByB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACxB,SAAUmC,S,+BAQtC,IAAD,EACmCZ,KAAKJ,MAAtCnB,EADF,EACEA,SAAUM,EADZ,EACYA,oBACX8B,EAAmBpC,EAASqC,QAAO,SAAAC,GACrC,OAAOA,EAAS5C,KAAK6C,cAAcC,SAASlC,EAAoBiC,kBAEpE,OAAKvC,EAASyC,OAIN,6BACI,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAeW,aAAcgB,KAAKI,wBAClC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAa3B,SAAUoC,QATpC,2C,GA1BDX,aCIEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDwHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.5d68b8aa.chunk.js","sourcesContent":["import React from 'react'\n\nconst StudentItem = ({id, name, email}) => {\n    return (\n        <div className='student-item bg-light-green dib br3 pa3 ma2 grow'>\n            <img alt=\"Student\" src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default StudentItem;","import React from \"react\";\nimport StudentItem from \"./StundentItem\";\nimport './student.css'\n\nconst StudentList = ({Students}) => {\n    return (\n        <div>\n            {\n                Students.map((student, i) => {\n                    return (\n                        <StudentItem\n                            key={i}\n                            id={Students[i].id}\n                            name={Students[i].name}\n                            email={Students[i].email}/>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default StudentList;","import React from \"react\";\n\nconst StudentSearch = ({studentsSearchField, searchChange}) => {\n    return (\n        <input\n            className='pa3 ba b--green bg-light-blue'\n            type='search'\n            placeholder='search student'\n            onChange={searchChange}\n        />\n    );\n}\n\nexport default StudentSearch;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div  className='mt3 pt2' style={{overflowY: 'scroll', borderTop: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component{\n    constructor(props) {\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooooops. That is not good!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from \"react\";\nimport './App.css'\nimport StudentList from \"../students/StudentList\";\nimport StudentSearch from \"../students/StudentSearch\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\n\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            Students: [],\n            studentsSearchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({Students: users})\n            )\n    }\n\n    onStudentSearchChange = (event) => {\n        this.setState({studentsSearchField: event.target.value});\n    }\n\n    render() {\n        const {Students, studentsSearchField} = this.state;\n        const filteredStudents = Students.filter(students => {\n            return students.name.toLowerCase().includes(studentsSearchField.toLowerCase())\n        })\n        if (!Students.length) {\n            return <h1>Loading</h1>\n        } else {\n            return (\n                <div>\n                    <div className='tc'>\n                        <h1 className='f2'>Caucasus University</h1>\n                        <StudentSearch searchChange={this.onStudentSearchChange}/>\n                        <Scroll>\n                            <ErrorBoundry>\n                                <StudentList Students={filteredStudents}/>\n                            </ErrorBoundry>\n                        </Scroll>\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}